m5_download <- function(path, unzip=TRUE){
url <- "https://github.com/krzjoa/m5-data/raw/main/datasets/m5.zip"
is_dir <- file.info(path)$isdir
if (!is.na(is_dir))
if (is_dir)
path <- file.path(path, "m5.zip")
else {
dir.create(path)
#path <- file.path(path, "m5.zip")
}
download.file(url, path)
if (unzip)
utils::unzip(path, exdir = dirname(path))
}
m5_download('data-test')
library(dplyr)
library(data.table)
library(m5)
library(zeallot)
?melt
melt(sales_train, measure.vars="d_*")
c(sales_train,
sales_test,
sell_prices,
calendar,
weights) %<-% m5_get_raw_evaluation('*')
.abstract_get_raw <- function(path, files){
files <- file.path(path, files)
Map(data.table::fread, files)
}
#' @rdname m5_get_raw_*
#' @export
m5_get_raw_evaluation <- function(path){
files <- c(
'sales_train_evaluation.csv',
'sales_test_evaluation.csv',
'sell_prices.csv',
'calendar.csv',
'weights_evaluation.csv'
)
.abstract_get_raw(path, files)
}
#' @rdname m5_get_raw_*
#' @export
m5_get_raw_validation <- function(path){
files <- c(
'sales_train_validation.csv',
'sales_test_validation.csv',
'sell_prices.csv',
'calendar.csv',
'weights_validation.csv'
)
.abstract_get_raw(path, files)
}
c(sales_train,
sales_test,
sell_prices,
calendar,
weights) %<-% m5_get_raw_evaluation('data-test')
c(sales_train,
sales_test,
sell_prices,
calendar,
weights) %<-% m5_get_raw_evaluation('data-test')
m5_download <- function(path, unzip=TRUE){
url <- "https://github.com/krzjoa/m5-data/raw/main/datasets/m5.zip"
# is_dir <- file.info(path)$isdir
#  if (!is.na(is_dir))
#    if (is_dir)
#      path <- file.path(path, "m5.zip")
#  else {
#    dir.create(path)
#    #path <- file.path(path, "m5.zip")
#  }
path <- file.path(path, "m5.zip")
download.file(url, path)
if (unzip)
utils::unzip(path, exdir = dirname(path))
}
m5_download <- function(path, unzip=TRUE){
url <- "https://github.com/krzjoa/m5-data/raw/main/datasets/m5.zip"
# is_dir <- file.info(path)$isdir
#  if (!is.na(is_dir))
#    if (is_dir)
#      path <- file.path(path, "m5.zip")
#  else {
#    dir.create(path)
#    #path <- file.path(path, "m5.zip")
#  }
path <- file.path(path, "m5.zip")
download.file(url, path)
if (unzip)
utils::unzip(path, exdir = dirname(path))
}
m5_download('data-test')
m5_download <- function(path, unzip=TRUE){
url <- "https://github.com/krzjoa/m5-data/raw/main/datasets/m5.zip"
# is_dir <- file.info(path)$isdir
#  if (!is.na(is_dir))
#    if (is_dir)
#      path <- file.path(path, "m5.zip")
#  else {
#    dir.create(path)
#    #path <- file.path(path, "m5.zip")
#  }
dir.create(path)
# path <- file.path(path, "m5.zip")
download.file(url, path)
if (unzip)
utils::unzip(path, exdir = dirname(path))
}
m5_download('data-test')
m5_download <- function(path, unzip=TRUE){
url <- "https://github.com/krzjoa/m5-data/raw/main/datasets/m5.zip"
# is_dir <- file.info(path)$isdir
#  if (!is.na(is_dir))
#    if (is_dir)
#      path <- file.path(path, "m5.zip")
#  else {
#    dir.create(path)
#    #path <- file.path(path, "m5.zip")
#  }
dir.create(path)
path <- file.path(path, "m5.zip")
download.file(url, path)
if (unzip)
utils::unzip(path, exdir = dirname(path))
}
m5_download('data-test')
c(sales_train,
sales_test,
sell_prices,
calendar,
weights) %<-% m5_get_raw_evaluation('data-test')
melt(sales_train, measure.vars="d_*")
?melt
melt(sales_train, measure.vars="d_.*")
melt(sales_train, measure.vars="d.*")
library(dplyr)
library(data.table)
library(m5)
library(zeallot)
melt(sales_train, measure.vars=data.table:::patterns("d_.*"))
melt(sales_train, measure.vars=data.table:::patterns("d_.*"))
melt(sales_train, measure.vars=data.table:::patterns("d_.*")) %>% dim()
dim(sales_train)
?melt
melt(sales_train, measure.vars=data.table:::patterns("d^"))
colnames(sales_train)[6:]
.cols <- colnames(sales_train)[6:length(colnames(sales_train))]
.cols
melt(sales_train, measure.vars=.cols)
.cols <- colnames(sales_train)[6:length(colnames(sales_train))]
sales_train_long <- melt(sales_train, measure.vars=.cols)
.cols <- colnames(sales_test)[6:length(colnames(sales_test))]
sales_test_long  <- melt(sales_test, measure.vars=.cols)
sales_train_long[, variable := as.integer(variable)]
sales_train_long
sales_test_long[, variable := as.integer(variable)]
# Prepare calendar
calendar[, date = lubridate::as_date(date)]
# Prepare calendar
setDT(calendar)
calendar[, date = lubridate::as_date(date)]
# Prepare calendar
calendar[, date := lubridate::as_date(date)]
.cols <- colnames(calendar)[startsWith(colnames(calendar, 'snap'))]
.cols <- colnames(calendar)[startsWith(colnames(calendar), 'snap')]
.cols
calendar <- melt(calendar, measure.vars=.cols)
calendar
sapply(calendar, class)
calendar[, variable := stringi::stri_sub(variable, 6)]
calendar
setnames(calendar, 'variable', 'state_id')
setnames(calendar, 'value', 'snap')
calendar[, d := 1:.N]
sales <-
rbindlist(list(
sales_train_long,
sales_test_long
))
rm(sales_train_long)
rm(sales_test_long)
gc()
m5_data <-
rbindlist(list(
sales_train_long,
sales_test_long
))
m5_data <- sales
m5_data
rm(sales)
gc()
m5_data$variable %>% unique()
setnames(m5_data, 'variable', 'd')
m5_data[calendar]
m5_data[calendar, on=c("d", "state_id")]
setnames
dim(m5_data)
dim(m5_data[calendar, on=c("d", "state_id")])
calendar[m5_data, on=c("d", "state_id")]
gc()
m5_data <-
sell_prices[m5_data, on=c("store_id", "item_id", "wm_yr_wk"))]
m5_data <-
sell_prices[m5_data, on=c("store_id", "item_id", "wm_yr_wk")]
m5_data <-
sell_prices[m5_data, on=c("store_id", "item_id", "wm_yr_wk")]
sell_prices
calendar
m5_data
m5_data <-
rbindlist(list(
sales_train_long,
sales_test_long
))
.cols <- colnames(sales_train)[6:length(colnames(sales_train))]
sales_train_long <- melt(sales_train, measure.vars=.cols)
.cols <- colnames(sales_test)[6:length(colnames(sales_test))]
sales_test_long  <- melt(sales_test, measure.vars=.cols)
setDT(sales_train_long)
setDT(sales_test_long)
sales_train_long[, variable := as.integer(variable)]
sales_test_long[, variable := as.integer(variable)]
# Prepare calendar
calendar[, date := lubridate::as_date(date)]
.cols <- colnames(calendar)[startsWith(colnames(calendar), 'snap')]
calendar <- melt(calendar, measure.vars=.cols)
calendar[, variable := stringi::stri_sub(variable, 6)]
setnames(calendar, 'variable', 'state_id')
setnames(calendar, 'value', 'snap')
calendar[, d := 1:.N]
# Prepare sales
m5_data <-
rbindlist(list(
sales_train_long,
sales_test_long
))
?merge
m5_data <- merge(m5_data, m5_data, by=c("d", "state_id"), all.x = TRUE)
calendar
setnames(m5_data, 'variable', 'd')
rm(sales_train_long)
rm(sales_test_long)
gc()
m5_data <- merge(m5_data, m5_data, by=c("d", "state_id"), all.x = TRUE)
m5_data <- merge(m5_data, calendar, by=c("d", "state_id"), all.x = TRUE)
# Prepare calendar
calendar[, date := lubridate::as_date(date)]
.cols <- colnames(calendar)[startsWith(colnames(calendar), 'snap')]
calendar <- melt(calendar, measure.vars=.cols)
calendar[, variable := stringi::stri_sub(variable, 6)]
setnames(calendar, 'variable', 'state_id')
setnames(calendar, 'value', 'snap')
calendar[, d := 1:.N]
m5_data <- merge(m5_data, calendar, by=c("d", "state_id"), all.x = TRUE)
m5_data
calendar
c(sales_train,
sales_test,
sell_prices,
calendar,
weights) %<-% m5_get_raw_evaluation('data-test')
gc()
calendar[, date := lubridate::as_date(date)]
.cols <- colnames(calendar)[startsWith(colnames(calendar), 'snap')]
calendar <- melt(calendar, measure.vars=.cols)
calendar[, variable := stringi::stri_sub(variable, 6)]
setnames(calendar, 'variable', 'state_id')
setnames(calendar, 'value', 'snap')
calendar[, d := 1:.N]
m5_data <- merge(m5_data, calendar, by=c("d", "state_id"), all.x = TRUE)
m5_data
gc()
gc()
m5_data <-
merge(m5_data, sell_prices,
by=c("store_id", "item_id", "wm_yr_wk"),
all.x = TRUE)
gc()
c(sales_train,
sales_test,
sell_prices,
calendar,
weights) %<-% m5_get_raw_evaluation('data-test')
.cols <- colnames(sales_train)[6:length(colnames(sales_train))]
sales_train_long <- melt(sales_train, measure.vars=.cols)
.cols <- colnames(sales_test)[6:length(colnames(sales_test))]
sales_test_long  <- melt(sales_test, measure.vars=.cols)
setDT(sales_train_long)
setDT(sales_test_long)
sales_train_long[, variable := as.integer(variable)]
sales_test_long[, variable := as.integer(variable)]
# Prepare calendar
calendar[, date := lubridate::as_date(date)]
.cols <- colnames(calendar)[startsWith(colnames(calendar), 'snap')]
calendar <- melt(calendar, measure.vars=.cols)
calendar[, variable := stringi::stri_sub(variable, 6)]
setnames(calendar, 'variable', 'state_id')
setnames(calendar, 'value', 'snap')
calendar[, d := 1:.N]
.abstract_get_raw <- function(path, files){
files <- file.path(path, files)
Map(data.table::fread, files)
}
#' @rdname m5_get_raw_*
#' @export
m5_get_raw_evaluation <- function(path){
files <- c(
'sales_train_evaluation.csv',
'sales_test_evaluation.csv',
'sell_prices.csv',
'calendar.csv',
'weights_evaluation.csv'
)
.abstract_get_raw(path, files)
}
#' @rdname m5_get_raw_*
#' @export
m5_get_raw_validation <- function(path){
files <- c(
'sales_train_validation.csv',
'sales_test_validation.csv',
'sell_prices.csv',
'calendar.csv',
'weights_validation.csv'
)
.abstract_get_raw(path, files)
}
c(sales_train,
sales_test,
sell_prices,
calendar,
weights) %<-% m5_get_raw_evaluation('data-test')
.cols <- colnames(sales_train)[6:length(colnames(sales_train))]
sales_train_long <- melt(sales_train, measure.vars=.cols)
.cols <- colnames(sales_test)[6:length(colnames(sales_test))]
sales_test_long  <- melt(sales_test, measure.vars=.cols)
setDT(sales_train_long)
setDT(sales_test_long)
sales_train_long[, variable := as.integer(variable)]
sales_test_long[, variable := as.integer(variable)]
# Prepare calendar
calendar[, date := lubridate::as_date(date)]
.cols <- colnames(calendar)[startsWith(colnames(calendar), 'snap')]
calendar <- melt(calendar, measure.vars=.cols)
calendar[, variable := stringi::stri_sub(variable, 6)]
setnames(calendar, 'variable', 'state_id')
setnames(calendar, 'value', 'snap')
calendar[, d := 1:.N]
m5_data <-
rbindlist(list(
sales_train_long,
sales_test_long
))
setnames(m5_data, 'variable', 'd')
rm(sales_train_long)
rm(sales_test_long)
gc()
calendar
m5_data[calendar, on = .(d, state_id),
`:=`(weekday=weekday,
wday=wday,
month=month,
year=year,
event_name_1=event_name_1,
event_type_1=event_type_1,
event_name_2=event_name_2,
event_type_2=event_type_2,
state_id=state_id,
snap=snap)]
m5_data
m5_data
m5_data[is.na(year)]
m5_data
m5_data[is.na(year)]$d %>% unique()
gc()
sell_prices
m5_data[sell_prices, on = .(store_id, item_id, wm_yr_wk),
`:=`(sell_price=sell_price)]
.abstract_get_raw <- function(path, files){
files <- file.path(path, files)
Map(data.table::fread, files)
}
#' @rdname m5_get_raw_*
#' @export
m5_get_raw_evaluation <- function(path){
files <- c(
'sales_train_evaluation.csv',
'sales_test_evaluation.csv',
'sell_prices.csv',
'calendar.csv',
'weights_evaluation.csv'
)
.abstract_get_raw(path, files)
}
#' @rdname m5_get_raw_*
#' @export
m5_get_raw_validation <- function(path){
files <- c(
'sales_train_validation.csv',
'sales_test_validation.csv',
'sell_prices.csv',
'calendar.csv',
'weights_validation.csv'
)
.abstract_get_raw(path, files)
}
c(sales_train,
sales_test,
sell_prices,
calendar,
weights) %<-% m5_get_raw_evaluation('data-test')
.cols <- colnames(sales_train)[6:length(colnames(sales_train))]
sales_train_long <- melt(sales_train, measure.vars=.cols)
.cols <- colnames(sales_test)[6:length(colnames(sales_test))]
sales_test_long  <- melt(sales_test, measure.vars=.cols)
setDT(sales_train_long)
setDT(sales_test_long)
sales_train_long[, variable := as.integer(variable)]
sales_test_long[, variable := as.integer(variable)]
# Prepare calendar
calendar[, date := lubridate::as_date(date)]
.cols <- colnames(calendar)[startsWith(colnames(calendar), 'snap')]
calendar <- melt(calendar, measure.vars=.cols)
calendar[, variable := stringi::stri_sub(variable, 6)]
setnames(calendar, 'variable', 'state_id')
setnames(calendar, 'value', 'snap')
calendar[, d := 1:.N]
# Prepare sales
m5_data <-
rbindlist(list(
sales_train_long,
sales_test_long
))
setnames(m5_data, 'variable', 'd')
rm(sales_train_long)
rm(sales_test_long)
gc()
gc()
m5_data[calendar, on = .(d, state_id),
`:=`(wm_yr_wk=wm_yr_wk,
weekday=weekday,
wday=wday,
month=month,
year=year,
event_name_1=event_name_1,
event_type_1=event_type_1,
event_name_2=event_name_2,
event_type_2=event_type_2,
state_id=state_id,
snap=snap)]
gc()
m5_data
m5_data[sell_prices, on = .(store_id, item_id, wm_yr_wk),
`:=`(sell_price=sell_price)]
gc()
eponge::erase_data()
gc()
c(sales_train,
sales_test,
sell_prices,
calendar,
weights) %<-% m5_get_raw_evaluation('data-test')
.cols <- colnames(sales_train)[6:length(colnames(sales_train))]
sales_train_long <- melt(sales_train, measure.vars=.cols)
.cols <- colnames(sales_test)[6:length(colnames(sales_test))]
sales_test_long  <- melt(sales_test, measure.vars=.cols)
setDT(sales_train_long)
setDT(sales_test_long)
sales_train_long[, variable := as.integer(variable)]
sales_test_long[, variable := as.integer(variable)]
# Prepare calendar
calendar[, date := lubridate::as_date(date)]
.cols <- colnames(calendar)[startsWith(colnames(calendar), 'snap')]
calendar <- melt(calendar, measure.vars=.cols)
calendar[, variable := stringi::stri_sub(variable, 6)]
setnames(calendar, 'variable', 'state_id')
setnames(calendar, 'value', 'snap')
calendar[, d := 1:.N]
m5_data <-
rbindlist(list(
sales_train_long,
sales_test_long
))
setnames(m5_data, 'variable', 'd')
m5_data
rm(sales_train_long)
rm(sales_test_long)
gc()
m5_data
calendar
calendar[, d := 1:.N, by=state_id]
calendar
m5_data[calendar, on = .(d, state_id),
`:=`(wm_yr_wk=wm_yr_wk,
weekday=weekday,
wday=wday,
month=month,
year=year,
event_name_1=event_name_1,
event_type_1=event_type_1,
event_name_2=event_name_2,
event_type_2=event_type_2,
state_id=state_id,
snap=snap)]
gc()
m5_data
m5_data[sell_prices, on = .(store_id, item_id, wm_yr_wk),
`:=`(sell_price=sell_price)]
gc()
