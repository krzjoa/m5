m5_data <-
merge(m5_data, sell_prices,
by=c("store_id", "item_id", "wm_yr_wk"),
all.x = TRUE)
gc()
c(sales_train,
sales_test,
sell_prices,
calendar,
weights) %<-% m5_get_raw_evaluation('data-test')
.cols <- colnames(sales_train)[6:length(colnames(sales_train))]
sales_train_long <- melt(sales_train, measure.vars=.cols)
.cols <- colnames(sales_test)[6:length(colnames(sales_test))]
sales_test_long  <- melt(sales_test, measure.vars=.cols)
setDT(sales_train_long)
setDT(sales_test_long)
sales_train_long[, variable := as.integer(variable)]
sales_test_long[, variable := as.integer(variable)]
# Prepare calendar
calendar[, date := lubridate::as_date(date)]
.cols <- colnames(calendar)[startsWith(colnames(calendar), 'snap')]
calendar <- melt(calendar, measure.vars=.cols)
calendar[, variable := stringi::stri_sub(variable, 6)]
setnames(calendar, 'variable', 'state_id')
setnames(calendar, 'value', 'snap')
calendar[, d := 1:.N]
.abstract_get_raw <- function(path, files){
files <- file.path(path, files)
Map(data.table::fread, files)
}
#' @rdname m5_get_raw_*
#' @export
m5_get_raw_evaluation <- function(path){
files <- c(
'sales_train_evaluation.csv',
'sales_test_evaluation.csv',
'sell_prices.csv',
'calendar.csv',
'weights_evaluation.csv'
)
.abstract_get_raw(path, files)
}
#' @rdname m5_get_raw_*
#' @export
m5_get_raw_validation <- function(path){
files <- c(
'sales_train_validation.csv',
'sales_test_validation.csv',
'sell_prices.csv',
'calendar.csv',
'weights_validation.csv'
)
.abstract_get_raw(path, files)
}
c(sales_train,
sales_test,
sell_prices,
calendar,
weights) %<-% m5_get_raw_evaluation('data-test')
.cols <- colnames(sales_train)[6:length(colnames(sales_train))]
sales_train_long <- melt(sales_train, measure.vars=.cols)
.cols <- colnames(sales_test)[6:length(colnames(sales_test))]
sales_test_long  <- melt(sales_test, measure.vars=.cols)
setDT(sales_train_long)
setDT(sales_test_long)
sales_train_long[, variable := as.integer(variable)]
sales_test_long[, variable := as.integer(variable)]
# Prepare calendar
calendar[, date := lubridate::as_date(date)]
.cols <- colnames(calendar)[startsWith(colnames(calendar), 'snap')]
calendar <- melt(calendar, measure.vars=.cols)
calendar[, variable := stringi::stri_sub(variable, 6)]
setnames(calendar, 'variable', 'state_id')
setnames(calendar, 'value', 'snap')
calendar[, d := 1:.N]
m5_data <-
rbindlist(list(
sales_train_long,
sales_test_long
))
setnames(m5_data, 'variable', 'd')
rm(sales_train_long)
rm(sales_test_long)
gc()
calendar
m5_data[calendar, on = .(d, state_id),
`:=`(weekday=weekday,
wday=wday,
month=month,
year=year,
event_name_1=event_name_1,
event_type_1=event_type_1,
event_name_2=event_name_2,
event_type_2=event_type_2,
state_id=state_id,
snap=snap)]
m5_data
m5_data
m5_data[is.na(year)]
m5_data
m5_data[is.na(year)]$d %>% unique()
gc()
sell_prices
m5_data[sell_prices, on = .(store_id, item_id, wm_yr_wk),
`:=`(sell_price=sell_price)]
.abstract_get_raw <- function(path, files){
files <- file.path(path, files)
Map(data.table::fread, files)
}
#' @rdname m5_get_raw_*
#' @export
m5_get_raw_evaluation <- function(path){
files <- c(
'sales_train_evaluation.csv',
'sales_test_evaluation.csv',
'sell_prices.csv',
'calendar.csv',
'weights_evaluation.csv'
)
.abstract_get_raw(path, files)
}
#' @rdname m5_get_raw_*
#' @export
m5_get_raw_validation <- function(path){
files <- c(
'sales_train_validation.csv',
'sales_test_validation.csv',
'sell_prices.csv',
'calendar.csv',
'weights_validation.csv'
)
.abstract_get_raw(path, files)
}
c(sales_train,
sales_test,
sell_prices,
calendar,
weights) %<-% m5_get_raw_evaluation('data-test')
.cols <- colnames(sales_train)[6:length(colnames(sales_train))]
sales_train_long <- melt(sales_train, measure.vars=.cols)
.cols <- colnames(sales_test)[6:length(colnames(sales_test))]
sales_test_long  <- melt(sales_test, measure.vars=.cols)
setDT(sales_train_long)
setDT(sales_test_long)
sales_train_long[, variable := as.integer(variable)]
sales_test_long[, variable := as.integer(variable)]
# Prepare calendar
calendar[, date := lubridate::as_date(date)]
.cols <- colnames(calendar)[startsWith(colnames(calendar), 'snap')]
calendar <- melt(calendar, measure.vars=.cols)
calendar[, variable := stringi::stri_sub(variable, 6)]
setnames(calendar, 'variable', 'state_id')
setnames(calendar, 'value', 'snap')
calendar[, d := 1:.N]
# Prepare sales
m5_data <-
rbindlist(list(
sales_train_long,
sales_test_long
))
setnames(m5_data, 'variable', 'd')
rm(sales_train_long)
rm(sales_test_long)
gc()
gc()
m5_data[calendar, on = .(d, state_id),
`:=`(wm_yr_wk=wm_yr_wk,
weekday=weekday,
wday=wday,
month=month,
year=year,
event_name_1=event_name_1,
event_type_1=event_type_1,
event_name_2=event_name_2,
event_type_2=event_type_2,
state_id=state_id,
snap=snap)]
gc()
m5_data
m5_data[sell_prices, on = .(store_id, item_id, wm_yr_wk),
`:=`(sell_price=sell_price)]
gc()
eponge::erase_data()
gc()
c(sales_train,
sales_test,
sell_prices,
calendar,
weights) %<-% m5_get_raw_evaluation('data-test')
.cols <- colnames(sales_train)[6:length(colnames(sales_train))]
sales_train_long <- melt(sales_train, measure.vars=.cols)
.cols <- colnames(sales_test)[6:length(colnames(sales_test))]
sales_test_long  <- melt(sales_test, measure.vars=.cols)
setDT(sales_train_long)
setDT(sales_test_long)
sales_train_long[, variable := as.integer(variable)]
sales_test_long[, variable := as.integer(variable)]
# Prepare calendar
calendar[, date := lubridate::as_date(date)]
.cols <- colnames(calendar)[startsWith(colnames(calendar), 'snap')]
calendar <- melt(calendar, measure.vars=.cols)
calendar[, variable := stringi::stri_sub(variable, 6)]
setnames(calendar, 'variable', 'state_id')
setnames(calendar, 'value', 'snap')
calendar[, d := 1:.N]
m5_data <-
rbindlist(list(
sales_train_long,
sales_test_long
))
setnames(m5_data, 'variable', 'd')
m5_data
rm(sales_train_long)
rm(sales_test_long)
gc()
m5_data
calendar
calendar[, d := 1:.N, by=state_id]
calendar
m5_data[calendar, on = .(d, state_id),
`:=`(wm_yr_wk=wm_yr_wk,
weekday=weekday,
wday=wday,
month=month,
year=year,
event_name_1=event_name_1,
event_type_1=event_type_1,
event_name_2=event_name_2,
event_type_2=event_type_2,
state_id=state_id,
snap=snap)]
gc()
m5_data
m5_data[sell_prices, on = .(store_id, item_id, wm_yr_wk),
`:=`(sell_price=sell_price)]
gc()
devtools::load_all()
m5_download('data-test')
library(dplyr)
library(data.table)
library(m5)
library(zeallot)
devtools::load_all()
library(dplyr)
library(data.table)
library(m5)
library(zeallot)
m5_download('data-test')
c(sales_train,
sales_test,
sell_prices,
calendar,
weights) %<-% m5_get_raw_evaluation('data-test')
m5_data <- m5_prepare(
sales_train, sales_test, calendar, sell_prices
)
gc()
m5_data
head(m5_data)
m5_demand_type <- function(data){
data[, .(
adi = adi(value),
cv2 = cv2(value),
trimmed_adi = adi(leadtrail(value, lead = TRUE, trail = FALSE)),
trimmed_cv2 = cv2(leadtrail(value, lead = TRUE, trail = FALSE))
), by = .(item_id, store_id)]
}
m5_demand <- m5_demand_type(m5_data)
adi <- function(x, ...){
# sequences <- rle(x > 0)
# n_seq <- length(sequences$values)
# non_zero_seq  <- sum(sequences$values)
# n_seq / non_zero_seq
length(x) / sum(x > 0)
}
#' CV²
cv2 <- function(x, ...){
x <- x[x > 0]
(sd(x) / mean(x)) ^ 2
}
adi <- function(x, ...){
# sequences <- rle(x > 0)
# n_seq <- length(sequences$values)
# non_zero_seq  <- sum(sequences$values)
# n_seq / non_zero_seq
length(x) / sum(x > 0)
}
#' CV²
cv2 <- function(x, ...){
x <- x[x > 0]
(sd(x) / mean(x)) ^ 2
}
#' Classify time series of the particular items
#'
#' Each time series in the dataset can be assigned one of the following classes:
#'
#' * Intermittent
#' * Lumpy
#' * Smooth
#' * Erratic
#'
#' @param data The result of the `m5_prepare` function.
#'
#' @returns
#' A `data.frame` containing item ids, ADI and CV2 scores as well as the final
#' class chosen based on the aforementioned scores.
#'
#' @importFrom tsutils leadtrail
#'
#' @references
#' \dontrun{
#' m5_download('data')
#' c(sales_train,
#'   sales_test,
#'   sell_prices,
#'   calendar) %<-% m5_get_raw_evaluation('data')
#'
#' m5_data  <-
#'    m5_prepare(sales_train, sales_test, calendar, sell_prices)
#' }
#'
#' m5_demand <- m5_demand_type(m5_data)
#' }
#'
#' @export
m5_demand_type <- function(data){
data[, .(
adi = adi(value),
cv2 = cv2(value),
trimmed_adi = adi(leadtrail(value, lead = TRUE, trail = FALSE)),
trimmed_cv2 = cv2(leadtrail(value, lead = TRUE, trail = FALSE))
), by = .(item_id, store_id)]
}
Q
m5_demand <- m5_demand_type(m5_data)
library(tsutils)
library(tsutils)
install.packages('tsutils')
install.packages("MAPA")
install.packages("nloptr")
install.packages("nloptr")
install.packages('tsutils')
#' @param trail If \code{TRUE}, then trailing values are removed.
#'
#' @return Resulting vector.
#'
#' @author Nikolaos Kourentzes, \email{nikolaos@kourentzes.com}.
#'
#' @examples
#' x <- c(rep(0,5),rnorm(100),rep(0,5))
#' leadtrail(x)
#'
leadtrail <- function(x,rm=c("zeros","na"),lead=c(TRUE,FALSE),trail=c(TRUE,FALSE)){
# Defaults
rm <- match.arg(rm,c("zeros","na"))
lead <- lead[1]
trail <- trail[1]
# Select what to remove
if (rm=="zeros"){
idx <- which(x == 0)
} else {
idx <- which(is.na(x))
}
n <- length(x)
l <- length(idx)
# Handle leading observations
if (lead==TRUE & l>0){
if (idx[1]==1){
d.idx <- diff(idx)
loc <- which(d.idx > 1)[1]
if (is.na(loc)){
loc <- l
}
lead.rm <- 1:loc
} else {
lead.rm <- NULL
}
} else {
lead.rm <- NULL
}
# Handle trailing observations
if (trail==TRUE & l>0){
if (tail(idx,1)==n){
d.idx <- diff(rev(idx))
loc <- which(d.idx != -1)[1]
if (is.na(loc)){
loc <- l
}
trail.rm <- (n-loc+1):n
} else {
trail.rm <- NULL
}
} else {
trail.rm <- NULL
}
keep <- rep(TRUE,n)
keep[lead.rm] <- FALSE
keep[trail.rm] <- FALSE
y <- x[keep]
return(y)
}
#' https://deep-and-shallow.com/2020/10/07/forecast-error-measures-intermittent-demand/
#' Helper functions
#' Consider moving them into a separate package
adi <- function(x, ...){
# sequences <- rle(x > 0)
# n_seq <- length(sequences$values)
# non_zero_seq  <- sum(sequences$values)
# n_seq / non_zero_seq
length(x) / sum(x > 0)
}
#' CV²
cv2 <- function(x, ...){
x <- x[x > 0]
(sd(x) / mean(x)) ^ 2
}
#' Classify time series of the particular items
#'
#' Each time series in the dataset can be assigned one of the following classes:
#'
#' * Intermittent
#' * Lumpy
#' * Smooth
#' * Erratic
#'
#' @param data The result of the `m5_prepare` function.
#'
#' @returns
#' A `data.frame` containing item ids, ADI and CV2 scores as well as the final
#' class chosen based on the aforementioned scores.
#'
#'
#' @references
#' \dontrun{
#' m5_download('data')
#' c(sales_train,
#'   sales_test,
#'   sell_prices,
#'   calendar) %<-% m5_get_raw_evaluation('data')
#'
#' m5_data  <-
#'    m5_prepare(sales_train, sales_test, calendar, sell_prices)
#' }
#'
#' m5_demand <- m5_demand_type(m5_data)
#' }
#'
#' @export
m5_demand_type <- function(data){
data[, .(
adi = adi(value),
cv2 = cv2(value),
trimmed_adi = adi(leadtrail(value, lead = TRUE, trail = FALSE)),
trimmed_cv2 = cv2(leadtrail(value, lead = TRUE, trail = FALSE))
), by = .(item_id, store_id)]
}
m5_demand <- m5_demand_type(m5_data)
m5_demand
colnames(m5_data)
usethis::use_vignette("Demand classification")
usethis::use_vignette("demand_classification")
devtools::build_vignettes()
devtools::install()
devtools::document()
devtools::install()
devtools::install()
devtools::document()
devtools::document()
devtools::build_site()
devtools::document()
devtools::build_site()
pkgdown::build_site()
devtools::document()
devtools::document()
pkgdown::build_site()
usethis::use_github_actions_badge()
packageVersion("pkgdown")
update.packages("pkgdown")
packageVersion("pkgdown")
install.packages("pkgdown")
install.packages("pkgdown")
devtools::check()
usethis::use_package('lubridate')
usethis::use_package('dplyr')
usethis::use_package('data.table')
usethis::use_package('stringi')
devtools::document()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
devtools::document()
devtools::document()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
usethis::use_roxygen_md()
devtools::document()
devtools::document()
usethis::use_roxygen_md()
usethis::use_roxygen_md()
devtools::install("roxygen2md")
install.packages("roxygen2md")
devtools::document()
devtools::build_site()
usethis::use_package("zeallot", type = "Suggests")
usethis::use_package("ggplot2", type = "Suggests")
usethis::use_github_action("check-standard")
devtools::build()
devtools::build()
devtools::build()
devtools::document()
devtools::build()
